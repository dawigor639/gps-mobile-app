<!-- Generated by documentation.js. Update this documentation by updating the source code. -->

### Table of Contents

*   [CustomButton][1]
    *   [Parameters][2]
    *   [press][3]
    *   [updatePress][4]
        *   [Parameters][5]
*   [CustomSwitch][6]
    *   [Parameters][7]
*   [CustomTextInput][8]
    *   [Parameters][9]
    *   [validateAndUpdate][10]
        *   [Parameters][11]
    *   [state][12]
    *   [updateState][13]
        *   [Parameters][14]
*   [Devices][15]
    *   [devices][16]
    *   [dispatch][17]
    *   [selectedId][18]
    *   [whatPressed][19]
    *   [isEdit][20]
    *   [updateWhatPressed][21]
        *   [Parameters][22]
    *   [updateSelectedId][23]
        *   [Parameters][24]
    *   [updateIsEdit][25]
        *   [Parameters][26]
    *   [isFocused][27]
    *   [handleAddPress][28]
    *   [handleEditPress][29]
    *   [handleDeletePress][30]
    *   [handleCancelPress][31]
    *   [handleSavePress][32]
        *   [Parameters][33]
    *   [getArrayElement][34]
*   [DevicesList][35]
    *   [Parameters][36]
    *   [getColorByStatus][37]
        *   [Parameters][38]
    *   [RoundedSquare][39]
        *   [Parameters][40]
    *   [Item][41]
        *   [Parameters][42]
    *   [renderItem][43]
        *   [Parameters][44]
*   [DevicesListElement][45]
    *   [Parameters][46]
    *   [element][47]
    *   [updateElement][48]
        *   [Parameters][49]
    *   [valid][50]
    *   [updateValid][51]
        *   [Parameters][52]
*   [DevicesListLight][53]
    *   [Parameters][54]
    *   [Item][55]
        *   [Parameters][56]
    *   [renderItem][57]
        *   [Parameters][58]
*   [DevicesMenu][59]
    *   [Parameters][60]
*   [FetchData][61]
    *   [fetchInterval][62]
    *   [getTimestampInSeconds][63]
    *   [dispatch][64]
    *   [generateRequestId][65]
    *   [registerRequest][66]
        *   [Parameters][67]
    *   [unregisterRequest][68]
        *   [Parameters][69]
    *   [sendRequest][70]
        *   [Parameters][71]
    *   [handleRequests][72]
        *   [Parameters][73]
    *   [handleTimeouts][74]
        *   [Parameters][75]
    *   [updateDevice][76]
        *   [Parameters][77]
    *   [matchRequestKey][78]
        *   [Parameters][79]
    *   [handleBody][80]
        *   [Parameters][81]
    *   [handleMessage][82]
        *   [Parameters][83]
    *   [getMessages][84]
        *   [Parameters][85]
    *   [updateDB][86]
        *   [Parameters][87]
    *   [getMessagesDB][88]
        *   [Parameters][89]
    *   [handleMessages][90]
        *   [Parameters][91]
    *   [fetch][92]
    *   [handlePermissions][93]
*   [History][94]
    *   [selectedId][95]
    *   [isBarClick][96]
    *   [isFocused][97]
    *   [devices][98]
    *   [history][99]
    *   [updateIsBarClick][100]
        *   [Parameters][101]
    *   [updateSelectedId][102]
        *   [Parameters][103]
*   [HistoryList][104]
    *   [Parameters][105]
    *   [millisecondsToDateTime][106]
        *   [Parameters][107]
    *   [Item][108]
        *   [Parameters][109]
    *   [renderItem][110]
        *   [Parameters][111]
*   [Map][112]
    *   [mapRef][113]
    *   [position][114]
    *   [circle][115]
    *   [selectedId][116]
    *   [isEdit][117]
    *   [isConfirm][118]
    *   [isDelete][119]
    *   [showCarMarker][120]
    *   [device][121]
    *   [isFocused][122]
    *   [dispatch][123]
    *   [updateSelectedId][124]
        *   [Parameters][125]
    *   [updateIsEdit][126]
        *   [Parameters][127]
    *   [updateIsConfirm][128]
        *   [Parameters][129]
    *   [updateIsDelete][130]
        *   [Parameters][131]
    *   [updateShowCarMarker][132]
        *   [Parameters][133]
    *   [getCircle][134]
    *   [getPosition][135]
    *   [updateCircle][136]
        *   [Parameters][137]
    *   [handleEditPress][138]
    *   [handleEditPressConfirm][139]
    *   [handleCancelPress][140]
    *   [handleSavePress][141]
    *   [onCenter][142]
    *   [handlePress][143]
        *   [Parameters][144]
*   [MapConfirmMenu][145]
    *   [Parameters][146]
*   [MapEditMenu][147]
    *   [Parameters][148]
    *   [switchSetting][149]
    *   [valid][150]
    *   [updateValid][151]
        *   [Parameters][152]
    *   [updateSwitchSetting][153]
        *   [Parameters][154]
    *   [handleConfirm][155]
    *   [handleDelete][156]
*   [MapMainMenu][157]
    *   [Parameters][158]
*   [MapTopBar][159]
    *   [Parameters][160]
    *   [devices][161]
    *   [isBarClick][162]
    *   [timeText][163]
    *   [updateIsBarClick][164]
        *   [Parameters][165]
    *   [updateTimeText][166]
        *   [Parameters][167]
    *   [updateSelectedIdWrapped][168]
        *   [Parameters][169]
    *   [getTime][170]
        *   [Parameters][171]
    *   [secondsToDhms][172]
        *   [Parameters][173]
    *   [decodeStatus][174]
        *   [Parameters][175]
*   [NavContainer][176]
*   [Permissions][177]
    *   [handleSmsPermissions][178]
    *   [checkSmsPermissions][179]
    *   [checkPermissions][180]
        *   [Parameters][181]
    *   [logicAnd][182]
        *   [Parameters][183]
    *   [requestPermissions][184]
        *   [Parameters][185]
*   [ReduxDatabase][186]
*   [ReduxDevices][187]
*   [ReduxStore][188]
*   [sharedValidation][189]
*   [sharedValues][190]
*   [Styles][191]

## CustomButton

This is a custom button component in JavaScript that changes its style when pressed and can be
disabled

### Parameters

*   `props`  The component props

    *   `props.name`  Button name
    *   `props.handleOnPress`  The function handles the cancel button press
    *   `props.disable`  Whether the press behaviour is disabled

Returns **JSX.Element** Return customised button element

### press

Informs whether the button is being pressed or not

### updatePress

The function updates the value of a variable called "press".

#### Parameters

*   `value`  new value for "press" state

## CustomSwitch

Custom switch component that changes style based on the prop value

### Parameters

*   `props`  The component props

    *   `props.name`  Switch name
    *   `props.value`  Switch value
    *   `props.handleOnPress`  function called on switch press

Returns **JSX.Element** Return customised switch element

## CustomTextInput

Renders custom text input component that validates and updates user input based on
specified parameters

### Parameters

*   `props`  The component properties

    *   `props.name`  The name of the input field
    *   `props.type`  The type of the input field
    *   `props.maxLength-null`  The maximum length of the input value
    *   `props.keyboardType`  The keyboard type to be displayed on mobile devices
    *   `props.range`  The range of values allowed for the input field
    *   `props.regex`  The regular expression pattern to validate the input value
    *   `props.updateValue`  A callback function to update the input value
    *   `props.passValue`  A callback function to pass the input value to a parent component
    *   `props.secure`  Determines whether the input value should be masked for sensitive data
    *   `props.updateValid`  A callback function to update the validity state of the input value
    *   `props.visible`  Determines whether the component should be visible

Returns **JSX.Element** The rendered custom text input component

### validateAndUpdate

The function validates and updates a given text input based on its type and range.

#### Parameters

*   `text`  The input text to be validated and updated.

### state

Object representing current state of component, it keeps information about value, focus
data validity and character hiding

### updateState

The function updates the state object by setting a specific field to a given value.

#### Parameters

*   `field`  The name of the field in the state object that needs to be updated.
*   `value`  The value that will be assigned to the specified field in the state object.

## Devices

Displays a list of devices and allows the user to add, edit, or delete devices, with
the ability to save changes and display toast messages

Returns **JSX.Element** Renders a title, a list of devices, and a menu with buttons for adding,
editing, and deleting devices. It also conditionally renders a form for editing or adding a device,
depending on the state

### devices

Selected `savedDevices` state from the Redux store

### dispatch

Dispatch actions to the Redux store

### selectedId

Id of the selected device

### whatPressed

Informs what button was pressed

### isEdit

Indicates whether editing is active

### updateWhatPressed

Updates "whatPressed" state

#### Parameters

*   `value`  New value that will be assigned to the "whatPressed" state

### updateSelectedId

Updates "selectedId" state

#### Parameters

*   `value`  New value that will be assigned to the "selectedId" state

### updateIsEdit

Updates "isEdit" state

#### Parameters

*   `value`  New value that will be assigned to the "isEdit" state

### isFocused

Determine whether the screen is currently focused or not

### handleAddPress

The function handles the add button press

### handleEditPress

The function handles the edit button press

### handleDeletePress

The function handles the delete button press

### handleCancelPress

The function handles the cancel button press

### handleSavePress

The function handles saving new or edited device information and displays a toast message

#### Parameters

*   `newElement`  a new object that contains the updated information of a device

### getArrayElement

The function returns an object with name, address, and password properties based on the value of
the variable "whatPressed" and the selected device ID

Returns **any** Object with properties `name`, `address`, and `password`, and an additional property `id`
if element was found based on id

## DevicesList

The function renders a list of devices with their status and information, allowing the user to
select a device and update the selected device ID

### Parameters

*   `props`  The component props

    *   `props.selectedId`  The ID of the selected device
    *   `props.updateSelectedId`  The function to update the selected device ID
    *   `props.devices`  The array of devices to display

Returns **JSX.Element** Renders a FlatList of devices with their
information and a colored square indicating their status. The function also includes a helper
function called getColorByStatus and a sub-component called RoundedSquare. The selected device is
highlighted with a blue background color

### getColorByStatus

The function returns a color based on a given status code

#### Parameters

*   `status`  The parameter "status" is a number that is used as input to the function
    "getColorByStatus". The function returns a color based on the value of the status parameter.

Returns **any** String representing a color based on the input
`status`. The color returned depends on the value of `status` and is determined by the switch
statement. If `status` is 21, the function returns 'white'. If `status` is 1 or 2, the function
returns 'grey'. If `status` is 3, the function

### RoundedSquare

Rounded square component with a specified color

#### Parameters

*   `props` **[Object][192]** The component props

    *   `props.color`  color of rendered element

Returns **JSX.Element** A React component that renders a rounded square with a specified color

### Item

Item used in devices list

#### Parameters

*   `props` **[Object][192]** The component props

    *   `props.item`  The item object to render
    *   `props.onPress`  The function to handle item press
    *   `props.backgroundColor`  The background color of the item

Returns **JSX.Element** The rendered item component

### renderItem

Renders an `Item` component with background color based on id

#### Parameters

*   `props` **[Object][192]** The component props

    *   `props.item`  The item object to render

Returns **any** The rendered item component

## DevicesListElement

Functional component that renders a form for updating device information, including name,
address, and password, with validation and save/cancel buttons.

### Parameters

*   `props`  The component props

    *   `props.handleSavePress`  The function handles saving new or edited device information and displays a toast message
    *   `props.handleCancelPress`  The function handles the cancel button press.
    *   `props.getArrayElement`  The function returns an object with name, address,
        and password properties based on the value of the variable "whatPressed" and the selected device ID.

Returns **JSX.Element**&#x20;

Returns **any** A React component that renders a form for updating device information, including fields for
name, address, and password, as well as buttons for saving or canceling changes. The component uses
state to track the current values of the device information and whether each field is valid based on
regular expressions. The component also receives props for handling save and cancel actions and
retrieving the current device information.

### element

Object representing selected array element

### updateElement

This is a function that updates an element's state with a new value based on its name.

#### Parameters

*   `name`  Name of the element being updated. It
    is used as a key in the object being updated with the new value.
*   `value`  The value that needs to be updated for the element.

### valid

Object used to track whether each input field in the form is valid

### updateValid

This is a function that updates the state of a valid object with a new value for a specific key

#### Parameters

*   `name`  Name of the property in the state object that needs to be updated
*   `value`  New value that needs to be assigned to the property with
    the name specified in the name parameter

## DevicesListLight

The function renders a simple list of devices

### Parameters

*   `props`  The component props

    *   `props.selectedId`  The ID of the selected device
    *   `props.updateSelectedId`  The function to update the selected device ID
    *   `props.devices`  The array of devices to display

Returns **JSX.Element** Renders a FlatList of devices with their
information and a colored square indicating their status. The function also includes a helper
function called getColorByStatus and a sub-component called RoundedSquare. The selected device is
highlighted with a blue background color

### Item

Item used in devices list

#### Parameters

*   `props` **[Object][192]** The component props

    *   `props.item`  The item object to render
    *   `props.onPress`  The function to handle item press
    *   `props.backgroundColor`  The background color of the item

Returns **JSX.Element** The rendered item component

### renderItem

Renders an `Item` component

#### Parameters

*   `props` **[Object][192]** The component props

    *   `props.item`  The item object to render

Returns **any** The rendered item component

## DevicesMenu

The DevicesMenu function returns a view containing three CustomButton components for adding,
editing, and deleting devices, with the edit and delete buttons disabled if no device is selected

### Parameters

*   `props`  The component props

    *   `props.handleAddPress`  The function handles the add button press
    *   `props.handleEditPress`  The function handles the edit button press
    *   `props.handleDeletePress`  The function handles the delete button press
    *   `props.selectedId`  The ID of the selected device

Returns **JSX.Element** A React component that renders a menu with three buttons: "Add", "Edit", and "Delete"

## FetchData

This function fetches data from an SMS API at a specified interval, handles requests and timeouts,
updates device state based on received responses, and updates a database with received messages.

Returns **null**&#x20;

### fetchInterval

Interval in seconds, it is used for fetching data from an SMS API.

Type: [number][193]

### getTimestampInSeconds

The function returns the current timestamp in seconds

Returns **any** Returns the current timestamp in seconds as a whole number (integer)

### dispatch

Dispatch actions to update the state of the Redux store

### generateRequestId

The function generates a unique request ID by combining the current timestamp and a random string.

Returns **any** Returns a string that combines the current timestamp and a random string

### registerRequest

This function registers a new request by updating its id, time and status

#### Parameters

*   `elem`  Object containing information about single device
*   `requestKey`  Unique identifier for the request being registered.
*   `status`  Current status of a request
*   `requestId`  Unique identifier for a specific request

### unregisterRequest

This function unregisters a request by updating its status, id and time

#### Parameters

*   `elem`  Object containing information about single device
*   `requestKey`  Unique identifier for the request being registered
*   `status`  Current status of a request

### sendRequest

This function sends an SMS message with a specific payload to a phone number and registers a
new request on success

#### Parameters

*   `elem`  It is an object that contains information about the recipient of the SMS message,
    including their phone number and password.
*   `requestKey`  It is a key used to identify the type of request
*   `code`  Represents a code that will be sent in the SMS message
*   `payload`  An optional parameter that can be used to pass additional data along with the
    SMS message. It is an empty string by default (optional, default `""`)

### handleRequests

The function handles position and subscription/unsubscription requests for a given element

#### Parameters

*   `elem`  Object containing information about single device

### handleTimeouts

The function handles timeouts for position and sub/unsub requests in an element.

#### Parameters

*   `elem`  Object containing information about single device

### updateDevice

The function updates a device's position and circle information based on a payload, and dispatches
the changes

#### Parameters

*   `elem`  The `elem` parameter is an object that represents a device. It contains information
    about the device's position, circle, interval, and ID, as well as the status of its circle
    request
*   `payload`  The payload parameter is an array that contains information about position, circle and interval

### matchRequestKey

The function finds the key in a requests object that matches the response string

#### Parameters

*   `response`  The response string that needs to be matched with a request ID
*   `requests`  Object containing current requests

Returns **any** Returns the key of the request object in the `requests`
array that matches given `response` string.

### handleBody

The function handles the response body of a request and validates its parameters before updating
the state based on the code received.

#### Parameters

*   `body`  The response body
*   `elem`  Object containing information about single device

Returns **any** Returns `false` if the response is not awaited or if the response is invalid.
It returns `true` if the response is valid and the state has been updated based on the code

### handleMessage

Wraps the handleBody function

#### Parameters

*   `elem`  Object containing information about single device
*   `message`  Object that contains a `body` property.

### getMessages

The function retrieves messages from the SMS API that match a specific filter and passes them to
function that handles each message

#### Parameters

*   `elem`  Object containing information about single device

### updateDB

The function updates a database with a new record containing an address, date and message body,
using an ID to identify the specific element to update.

#### Parameters

*   `elem`  Object containing information about single device
*   `message`  Object with content of the message and additional information

### getMessagesDB

This function retrieves messages from an Android SMS API that match certain criteria
and updates a database with the retrieved messages.

#### Parameters

*   `elem`  Object containing information about single device

### handleMessages

The function handles messages, requests, timeouts, and retrieves messages from the messaging API
on Android and saves unique responses in a database.

#### Parameters

*   `elem`  Object containing information about single device

### fetch

The function fetches saved devices and handles messages for each device if permissions are
granted.

### handlePermissions

The function checks if SMS permissions are granted

Returns **any** Returns a boolean value indicating whether SMS permissions are granted or not.

## History

This is a React Native component that displays a history screen with a list of saved devices and
their SMS records.

Returns **JSX.Element** Renders a view containing a title, a bar container, and either a list of devices or a list of SMS records depending on the state of
the `isBarClick` variable. The component also uses state variables such as `selectedId` and
`isBarClick`, and Redux selectors to retrieve data from the store.

### selectedId

Id of the selected device

### isBarClick

Indicates bar click status

### isFocused

Determine whether the screen is currently focused or not

### devices

Selected `savedDevices` state from the Redux store

### history

History data selected from the Redux store that has an `id` property matching the current value of the `selectedId` state.
It is used in the `HistoryList` component

### updateIsBarClick

Updates "isBarClick" state

#### Parameters

*   `value`  New value that will be assigned to the "isBarClick" state

### updateSelectedId

Updates "selectedId" state

#### Parameters

*   `value`  New value that will be assigned to the "selectedId" state

## HistoryList

The function displays a list of historical items with additional information

### Parameters

*   `props`  The component props

    *   `props.selectedId`  The ID of the selected device
    *   `props.history`  History data selected from the Redux store

Returns **JSX.Element** It renders a `FlatList` component that displays a list of items from the `history` array.
Each item is rendered using the `Item` component, which displays the date and address of the item.
When an item is pressed, an alert is displayed

### millisecondsToDateTime

The function converts a given number of milliseconds into a formatted date and time string.

#### Parameters

*   `milliseconds`  The number of milliseconds since January 1, 1970, 00:00:00 UTC, also known
    as Unix timestamp.

Returns **any** Formatted date and time string in the
format "DD.MM.YYYY HH:MM:SS", where DD is the day, MM is the month, YYYY is the year, HH is the
hour, MM is the minute, and SS is the second, based on the input `milliseconds`.

### Item

Item used in devices list

#### Parameters

*   `props` **[Object][192]** The component props

    *   `props.item`  The item object to render
    *   `props.onPress`  The function to handle item press
    *   `props.backgroundColor`  The background color of the item

Returns **JSX.Element** The rendered item component

### renderItem

Renders an `Item` component, it can be pressed to display additional data

#### Parameters

*   `props` **[Object][192]** The function props.

    *   `props.item`  The item object to render.

Returns **any** The rendered item component

## Map

Displays a map with a marker and circle, and allows the user to
edit the circle's position and radius. The component also uses Redux to manage state and dispatch actions to update the state

Returns **JSX.Element** Renders a `MapView` from the `react-native-maps` library along with various menus and buttons for editing
and updating the map

### mapRef

Reference to the MapView component

### position

Object representing position

### circle

Object representing safe zone

### selectedId

Id of the selected device

### isEdit

Indicates whether editing is active

### isConfirm

Indicates whether confirmation is active

### isDelete

Indicates whether deletion is active

### showCarMarker

Variable indicating whether to show or hide the marker

### device

Selected device object from the `savedDevices` array in the Redux store. The `find` method is used
to search for the device object with an `id` property that matches the `selectedId` state
variable

### isFocused

Determine whether the screen is currently focused or not

### dispatch

Dispatch actions to the Redux store

### updateSelectedId

Updates "selectedId" state

#### Parameters

*   `value`  New value that will be assigned to the "selectedId" state

### updateIsEdit

Updates "isEdit" state

#### Parameters

*   `value`  New value that will be assigned to the "isEdit" state

### updateIsConfirm

Updates "isConfirm" state

#### Parameters

*   `value`  New value that will be assigned to the "isConfirm" state

### updateIsDelete

Updates "isDelete" state

#### Parameters

*   `value`  New value that will be assigned to the "isDelete" state

### updateShowCarMarker

Updates "showCarMarker" state

#### Parameters

*   `value`  New value that will be assigned to the "showCarMarker" state

### getCircle

The function retrieves the latitude, longitude, and radius of a circle object, with default values
if they are not provided.

### getPosition

This function updates the latitude and longitude properties of the position object with the values
from the device's position object, or sets them to null if they are not available.

### updateCircle

This function updates a circle object with a new value for a specified property.

#### Parameters

*   `name`  name is a string parameter that represents the name of the property in the circle
    object that needs to be updated.
*   `value`  The value that will be assigned to the property of the circle object with the key
    specified by the name parameter.

### handleEditPress

The function handles the edit button press.

### handleEditPressConfirm

The function is used to handle edit button press in confirm menu

### handleCancelPress

The function handles the cancel button press.

### handleSavePress

The function handles saving and updating the status of subscription request. It also changes the current circle.

### onCenter

Animates map to the current position

### handlePress

This function updates the latitude and longitude of a circle object based on an event parameter.

#### Parameters

*   `event`  The `event` parameter is an object that contains latitude and longitude coordinates used
    to update the `latitude` and `longitude` properties of the `circle` object

## MapConfirmMenu

This is a React component that renders a menu with three buttons for editing, canceling or saving

### Parameters

*   `props`  The component props

    *   `props.handleEditPress`  The function handles the edit button press
    *   `props.handleCancelPress`  The function handles the cancel button press
    *   `props.handleSavePress`  The function handles the save button press

Returns **JSX.Element** React component that renders a menu with three buttons: "Cancel", "Edit", and "Save"

## MapEditMenu

React component that renders a menu with options to edit, delete or confirm safe zone represented by circle object

### Parameters

*   `props`  The component props

    *   `props.updateCircle`  This function updates a circle object with a new value for a specified property.
    *   `props.circle`  Object representing safe zone
    *   `props.updateIsEdit`  Updates "isEdit" state
    *   `props.updateIsConfirm`  Updates "isConfirm" state
    *   `props.updateIsDelete`  Updates "isDelete" state

Returns **JSX.Element** React component that renders a menu with three buttons: "Cancel", "Edit", and "Save"

### switchSetting

indicates whether radius or geographic coordinates are being edited

### valid

Object used to track whether each input field is valid

### updateValid

This is a function that updates the state of a valid object with a new value for a specific key

#### Parameters

*   `name`  Name of the property in the state object that needs to be updated
*   `value`  New value that needs to be assigned to the property with
    the name specified in the name parameter

### updateSwitchSetting

The function updates a switch setting with a given value

#### Parameters

*   `value`  The value parameter is the new value for the switch setting

### handleConfirm

The function handles the confirm button press

### handleDelete

The function handles the delete button press

## MapMainMenu

Component that displays a menu with an "Edit" button and a switch to show or
hide a marker.

### Parameters

*   `props`  The component props

    *   `props.handleEditPress`  The function handles the edit button press
    *   `props.handleShowMarker`  The function handles pressing switch used to show or hide marker
    *   `props.showCarMarker`  Variable indicating whether to show or hide the marker

Returns **JSX.Element** React component that renders a menu with two elements: button and switch

## MapTopBar

React component that renders a top bar with information about a selected device and allows
the user to toggle a list of devices. The component uses hooks such as useState and useEffect to manage state and
update the information displayed. It also uses the useSelector hook from the Redux library to access
the savedDevices state

### Parameters

*   `props`  The component props

    *   `props.selectedId`  The ID of the selected device
    *   `props.updateSelectedId`  Updates "selectedId" state
    *   `props.isFocused`  Determine whether the screen is currently focused or not

Returns **JSX.Element** React component that renders a top bar with information about a selected device,
including its name, status, and live time. It also includes a menu button that opens a list of
devices to select from

### devices

Selected savedDevices state from the Redux store

### isBarClick

Indicates bar click status

### timeText

Used to display the live time of the selected device

### updateIsBarClick

Updates "isBarClick" state

#### Parameters

*   `value`  New value for the state

### updateTimeText

Updates "timeText" state

#### Parameters

*   `value`  New value for the state

### updateSelectedIdWrapped

The function updates the selected id and sets the isBarClick value to false

#### Parameters

*   `value`  New value for the "selectedID"

### getTime

Calculates the time difference between the current time and a given time
and updates the time text accordingly.

#### Parameters

*   `time`  Unix time

### secondsToDhms

The function converts a given number of seconds into a string representing the equivalent time in
days, hours, minutes, and seconds.

#### Parameters

*   `seconds`  The number of seconds to convert into a string representing days,
    hours, minutes, and seconds.

Returns **any** String representing the input number of seconds in the format of "d:h:m:s". The "d"
represents days, "h" represents hours, "m" represents minutes, and "s" represents seconds. If a
time unit has a value of 0, it is not included in the returned string.

### decodeStatus

The function decodes a given status code into status message.

#### Parameters

*   `status`  The status code that needs to be decoded into a human-readable string

Returns **any** Returns a string that corresponds to the status code
If the `status` parameter is null or undefined, an empty string is returned

## NavContainer

This function creates a navigation container with three screens using the createBottomTabNavigator
component from React Navigation

Returns **JSX.Element** Component that contains a `createBottomTabNavigator` component with three screens: `HomeScreen`, `DetailsScreen`, and
`HistoryScreen`. Each screen has an icon in the bottom tab bar, and the active and inactive colors
of the icons are defined

## Permissions

Module contains exported functions for handling and checking SMS permissions in a React Native app on
an Android device

### handleSmsPermissions

This function handles SMS permissions in a React Native app by checking and requesting permissions
for reading and sending SMS messages.

### checkSmsPermissions

The function checks for SMS permissions in an Android device.

Returns **any** Promise that resolves to a boolean value indicating whether the specified
permissions have been granted or not

### checkPermissions

Checks if permissions are granted on an Android device.

#### Parameters

*   `permissionsArray`  Array of permission strings that need to be checked using the
    PermissionsAndroid module in a React Native app.

Returns **any** Boolean value indicating whether the permissions in the `permissionsArray` have been
granted or not.

### logicAnd

The function checks if all values in an object are "granted" and returns true if they are.

#### Parameters

*   `granted`  The parameter `granted` is an object that contains keys and values representing
    permissions or access levels

Returns **any** Returns `true` if all the values in the `granted` object are equal to the string "granted", and `false` otherwise.

### requestPermissions

The function requests multiple permissions in Android

#### Parameters

*   `permissionsArray`  an array of strings representing the permissions that the app is
    requesting from the user

## ReduxDatabase

Module contains Redux slice created using the `createSlice` function from the `@reduxjs/toolkit`
package. The slice is named `dataBase` and has an initial state of an empty array. It also defines
three reducer functions: `addDevice`, `addRecord`, and `delDevice`. These reducers modify the state
of the slice in response to actions dispatched to the Redux store. Finally, the code exports the
reducer function and the action creators for the slice

## ReduxDevices

Module contains a Redux slice for managing a list of saved devices. It uses
the `createSlice` function from the `@reduxjs/toolkit` library to create the slice, which includes
the initial state, reducers for adding, editing, and deleting devices, and thunks for dispatching
actions to add or delete devices from a database. The `addDeviceThunk` and `delDeviceThunk` thunks
dispatch both the `add` or `del` action from the slice and the `addDevice` or `delDevice` action
from the `ReduxDatabase` module. The slice also includes reducers for editing device properties and
requests

## ReduxStore

Module contains a Redux store configured using the `configureStore` function from the
`@reduxjs/toolkit` library. It also uses `redux-persist` to persist the state of the `savedDevices`
slice of the store to `AsyncStorage`. The `combineReducers` function is used to combine multiple
reducers into a single reducer function, and the `persistReducer` function is used to wrap the root
reducer with the persist configuration. The `store` and `persistor` variables are exported for use
in other parts of the application, and the `getDevices` function is exported to retrieve the
`savedDevices` slice of the store

## sharedValidation

This module contains exported regular expressions and a function for validating numbers

## sharedValues

Module contains exported constants that represent ranges and default values

## Styles

Module contains exported styles used in app components

[1]: #custombutton

[2]: #parameters

[3]: #press

[4]: #updatepress

[5]: #parameters-1

[6]: #customswitch

[7]: #parameters-2

[8]: #customtextinput

[9]: #parameters-3

[10]: #validateandupdate

[11]: #parameters-4

[12]: #state

[13]: #updatestate

[14]: #parameters-5

[15]: #devices

[16]: #devices-1

[17]: #dispatch

[18]: #selectedid

[19]: #whatpressed

[20]: #isedit

[21]: #updatewhatpressed

[22]: #parameters-6

[23]: #updateselectedid

[24]: #parameters-7

[25]: #updateisedit

[26]: #parameters-8

[27]: #isfocused

[28]: #handleaddpress

[29]: #handleeditpress

[30]: #handledeletepress

[31]: #handlecancelpress

[32]: #handlesavepress

[33]: #parameters-9

[34]: #getarrayelement

[35]: #deviceslist

[36]: #parameters-10

[37]: #getcolorbystatus

[38]: #parameters-11

[39]: #roundedsquare

[40]: #parameters-12

[41]: #item

[42]: #parameters-13

[43]: #renderitem

[44]: #parameters-14

[45]: #deviceslistelement

[46]: #parameters-15

[47]: #element

[48]: #updateelement

[49]: #parameters-16

[50]: #valid

[51]: #updatevalid

[52]: #parameters-17

[53]: #deviceslistlight

[54]: #parameters-18

[55]: #item-1

[56]: #parameters-19

[57]: #renderitem-1

[58]: #parameters-20

[59]: #devicesmenu

[60]: #parameters-21

[61]: #fetchdata

[62]: #fetchinterval

[63]: #gettimestampinseconds

[64]: #dispatch-1

[65]: #generaterequestid

[66]: #registerrequest

[67]: #parameters-22

[68]: #unregisterrequest

[69]: #parameters-23

[70]: #sendrequest

[71]: #parameters-24

[72]: #handlerequests

[73]: #parameters-25

[74]: #handletimeouts

[75]: #parameters-26

[76]: #updatedevice

[77]: #parameters-27

[78]: #matchrequestkey

[79]: #parameters-28

[80]: #handlebody

[81]: #parameters-29

[82]: #handlemessage

[83]: #parameters-30

[84]: #getmessages

[85]: #parameters-31

[86]: #updatedb

[87]: #parameters-32

[88]: #getmessagesdb

[89]: #parameters-33

[90]: #handlemessages

[91]: #parameters-34

[92]: #fetch

[93]: #handlepermissions

[94]: #history

[95]: #selectedid-1

[96]: #isbarclick

[97]: #isfocused-1

[98]: #devices-2

[99]: #history-1

[100]: #updateisbarclick

[101]: #parameters-35

[102]: #updateselectedid-1

[103]: #parameters-36

[104]: #historylist

[105]: #parameters-37

[106]: #millisecondstodatetime

[107]: #parameters-38

[108]: #item-2

[109]: #parameters-39

[110]: #renderitem-2

[111]: #parameters-40

[112]: #map

[113]: #mapref

[114]: #position

[115]: #circle

[116]: #selectedid-2

[117]: #isedit-1

[118]: #isconfirm

[119]: #isdelete

[120]: #showcarmarker

[121]: #device

[122]: #isfocused-2

[123]: #dispatch-2

[124]: #updateselectedid-2

[125]: #parameters-41

[126]: #updateisedit-1

[127]: #parameters-42

[128]: #updateisconfirm

[129]: #parameters-43

[130]: #updateisdelete

[131]: #parameters-44

[132]: #updateshowcarmarker

[133]: #parameters-45

[134]: #getcircle

[135]: #getposition

[136]: #updatecircle

[137]: #parameters-46

[138]: #handleeditpress-1

[139]: #handleeditpressconfirm

[140]: #handlecancelpress-1

[141]: #handlesavepress-1

[142]: #oncenter

[143]: #handlepress

[144]: #parameters-47

[145]: #mapconfirmmenu

[146]: #parameters-48

[147]: #mapeditmenu

[148]: #parameters-49

[149]: #switchsetting

[150]: #valid-1

[151]: #updatevalid-1

[152]: #parameters-50

[153]: #updateswitchsetting

[154]: #parameters-51

[155]: #handleconfirm

[156]: #handledelete

[157]: #mapmainmenu

[158]: #parameters-52

[159]: #maptopbar

[160]: #parameters-53

[161]: #devices-3

[162]: #isbarclick-1

[163]: #timetext

[164]: #updateisbarclick-1

[165]: #parameters-54

[166]: #updatetimetext

[167]: #parameters-55

[168]: #updateselectedidwrapped

[169]: #parameters-56

[170]: #gettime

[171]: #parameters-57

[172]: #secondstodhms

[173]: #parameters-58

[174]: #decodestatus

[175]: #parameters-59

[176]: #navcontainer

[177]: #permissions

[178]: #handlesmspermissions

[179]: #checksmspermissions

[180]: #checkpermissions

[181]: #parameters-60

[182]: #logicand

[183]: #parameters-61

[184]: #requestpermissions

[185]: #parameters-62

[186]: #reduxdatabase

[187]: #reduxdevices

[188]: #reduxstore

[189]: #sharedvalidation

[190]: #sharedvalues

[191]: #styles

[192]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object

[193]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number
